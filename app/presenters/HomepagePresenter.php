<?php

declare(strict_types=1);

namespace App\Presenters;

use Nette\Application\UI\Form;

use Nette;
use Tracy\Debugger;

class HomepagePresenter extends \App\Presenters\BasePresenter
{
    /**
     * @persistent int
     */
    public $id = NULL;

    /**
     * @persistent int
     */
    public $user = NULL;

    /** @var Nette\Database\Context @inject
     */
    public $database;

    /**
     * @var \App\Forms\PostForm @inject
     */
    public $postFormFactory;

    /**
     * @var \App\Forms\CommentsForm @inject
     */
    public $commentsFormFactory;

    protected $connection;
    /**
     * @var \Nette\Http\Session
     */
    private $session;

    /**
     * @var \Nette\Http\SessionSection
     */
    private $basket;

    protected function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
    }

    public function renderDefault(int $page = 1)
    {
        Debugger::barDump($this->getUser()->id);

        if($this->getUser()->isLoggedIn())
        {
            $this->template->posts = $this->database->table('posts')
                ->order('created_at DESC')
                ->page($page, 5)
                ->where(['user' => $this->getUser()->id]);
        } else {
            $this->template->posts = $this->database->table('posts')
                ->order('created_at DESC')
                ->page($page, 5);
        }

        $this->template->page = $page;
    }

    public function actionProducts(int $page = 1)
    {
        $this->template->products = $this->database->table('products')
            ->page($page, 5);
    }


    public function actionShow(int $postId)
    {
        $post = $this->database->table('posts')->get($postId);
        if (!$post) {
            $this->error('Post not found');
        }

        $this->id = $postId;

        $this->template->post = $post;
        $this->template->comments = $post->related('comment')->order('created_at');
    }


    public function actionCreate()
    {
        $this->id = NULL;
        $this->user = $this->getUser()->id;

        if (!$this->getUser()->isLoggedIn()) {
            $this->redirect('Sign:in');
        }
    }


    public function actionEdit($postId)
    {
        if (!$this->getUser()->isLoggedIn()) {
            $this->redirect('Sign:in');
        }

        $this->id = $postId;

        $post = $this->database->table('posts')->get($postId);
        if (!$post) {
            $this->flashMessage('Post ID do not exists');
            $this->redirect('default');
        }

        $this['postForm']->setDefaults($post);
    }


    public function handleRemove($postId)
    {
        if (!$this->getUser()->isLoggedIn()) {
            $this->redirect('Sign:in');
        }

        $post = $this->database->table('posts')->get($postId);

        if (!$post) {
            $this->flashMessage('Post ID do not exists');
            $this->redirect('default');
        }

        $this->database->table('comments')->where(['post_id' => $postId])->delete();
        $post->delete();

        $this->flashMessage('Post deleted successfully');
        $this->redirect('default');
    }


    public function createComponentPostForm(): Form
    {
        return $this->postFormFactory->create($this->id, $this->user);
    }

    protected function createComponentCommentsForm(): Form
    {
        return $this->commentsFormFactory->create($this->id);
    }
}
